#! /usr/bin/env bash

set -e

IMAGE=${FLAT_IMAGE:-sevenvaltechnologies/flatrunner}

usage() {
  cat <<EOF
Usage: "$0" COMMAND [-p PORT] [-d DEBUG] [-b] [TESTFILE ...] [DIRECTORY]

commands:

start             start flat (uses -p, -d and DIRECTORY)
stop              stop a running flat instance (uses -p and DIRECTORY)
test              run a flat-test file (uses -d, TESTFILE and DIRECTORY)
pull              pull latest flatrunner docker image and exit
check-template    check a template from the command line

start params:
-p      Listen port, default: 8080
-d      Debug parameters, default: *:error:log
-b      Use current beta release
DIR     FLAT app directory, default: .

test params:
-d       Debug parameters, default: *:error:log
TESTFILE FLAT test flow(s)
DIR      FLAT app directory, default: .

stop params:
-p      Listen port, default: 8080
DIR     FLAT app directory, default: .

check-template params:
FILE    template file

EOF
}

realPath() {
	d="$(dirname "$1")"
	f="$(basename "$1")"
	if cd "$d" 2>/dev/null && [ -f "$f" ]; then
		echo `pwd`/$f
		cd - >/dev/null
	else
		echo "File '$1' not found or unreadable" >&2
		exit 66
	fi
}

realDir() {
	if cd "$1" 2>/dev/null; then
		pwd
		cd - >/dev/null
	else
		echo "Directory '$1' not found or unreadable" >&2
		exit 66
	fi
}

if [[ -z "${TAG}" ]]; then
  TAG=latest
fi

port=8080
cmd=

case "$1" in
	stop) cmd=stop; shift ;;
	start) cmd=start; shift ;;
	test) cmd=test; access=1; shift ;;
	pull) cmd=pull; shift ;;
	check-template)
		file="${2:?"template file missing"}"
		if [[ -f $file ]]; then
			exec docker run --rm -i -v "$(cd "$(dirname "$file")" && pwd)/$(basename "$file")":/template --entrypoint flat-template ${IMAGE}:${TAG} --check /template
		else
			echo "template file $file not found" >&2
			exit 66
		fi
		;;
esac

if [[ -z $cmd ]]; then
	echo missing command >&2
	usage
	exit 64
fi

while getopts bhp:d: opt; do
  case ${opt} in
    p)
       port="$OPTARG"
       if ! [[  $port =~ ^[0-9]+$ ]]; then
         echo Port must be a positive decimal number >&2
         exit 64
       fi
    ;;
	d)
		FLAT_DEBUG="$OPTARG"
	;;
    h)
      usage
      exit
    ;;
    b)
      TAG=beta
    ;;
    *)
      usage
      exit 64
  esac
done

if [[ "$cmd" = "pull" ]]; then
    exec docker pull ${IMAGE}:${TAG}
fi

shift $((OPTIND-1))

PORT_ARGS=(-p $port:8080)
declare -a TESTFILES

if [[ $[ $# >= 1 ] && "$cmd" = "test" ]]; then

  while [ $# -gt  1 ]; do
    TESTFILE="$(realPath "$1")"
    TESTFILES+=("$TESTFILE")
    shift
  done
  if [ -d "$1" ]; then
    DIR="$(realDir "$1")"
  else
    TESTFILE="$(realPath "$1")"
    TESTFILES+=("$TESTFILE")
    DIR="$(realDir "")"
  fi
  i=$[ ${#TESTFILES[@]} - 1 ]
  while [ $i -ge 0 ]; do
    TESTFILES[$i]="${TESTFILES[$i]##$DIR/}"
    i=$[ $i - 1 ]
  done
  ENTRYPOINT=(--entrypoint flat-test )
  port=`basename "${TESTFILES[0]}"`
  unset PORT_ARGS
  QUIET=1
elif [[ $# = 0 ]]; then
  DIR="$(pwd)"
elif [[ $# != 1 ]]; then
  usage
  exit 66
else
  DIR="$(realDir "$1")"
fi
DOCKERNAME="flat-$(basename "$DIR" | tr -cd '[a-zA-Z0-9-_]')-$port"

if [[ $cmd == stop ]]; then
	echo "stopping flat instance ${DOCKERNAME}"
	exec docker stop ${DOCKERNAME} > /dev/null
fi

if [[ -f "$DIR"/conf/config.xml || -f "$DIR"/swagger.yaml ]]; then
  SITE_VOLUME=( -v "${DIR}":/app:cached )
  [ -z "$QUIET" ] && echo "Using directory: $DIR"
else
  echo "No FLAT app found in $DIR: create swagger.yaml to start"
  exit 67
fi

#43434 default debug
if [[ -z ${!FLAT_DEBUG@} ]]; then
	FLAT_DEBUG=":error:log"
fi

#45371 config via env
if [[ -n ${FLAT_SERVER_ROLE} ]]; then
	FIT_INSTALLATION_ROLE="${FLAT_SERVER_ROLE}"
fi
#44295 role devel
if [[ -z ${FIT_INSTALLATION_ROLE} ]]; then
	FIT_INSTALLATION_ROLE=devel
fi
if [ -z "$QUIET" ]; then
  echo "Installation role (\$server/role): $FIT_INSTALLATION_ROLE"
fi

# dynamic env vars
declare -a ENV_ARGS
for V in ${!FIT_@} ${!FLAT_@}; do
	ENV_ARGS+=(-e "$V=${!V}")
done

# dynamic file arguments
declare -a FILE_ARGS
for V in ${TESTFILES[@]}; do
	FILE_ARGS+=("$V")
done

if [ -z "$QUIET" ]; then
  echo
  echo starting FLAT runner with FLAT hash "$TAG"
  echo -e listening on:'\033[1m' http://localhost:$port '\033[0m'
  echo
fi

if [[ -n ${FLAT_NOSTART} ]]; then
	echo "not starting flat container (test-only)"
	exit 0
fi

# server writes logs to stderr, redirect to stdout for convenience
if [[ $cmd == start ]]; then
	exec 2>&1
fi

MSYS_NO_PATHCONV=1 docker run --rm  \
    "${PORT_ARGS[@]}" \
    "${SITE_VOLUME[@]}" \
    --name "${DOCKERNAME}" \
    ${FLAT_OPTIONS} \
    "${ENV_ARGS[@]}" \
    "${ENTRYPOINT[@]}" \
    ${IMAGE}:${TAG} \
    "${FILE_ARGS[@]}"
